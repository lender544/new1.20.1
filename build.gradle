buildscript {
    repositories {
        maven { url "https://files.minecraftforge.net/maven" }
        jcenter()
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'io.github.0ffz.github-packages' version '[1,2)'
    id 'org.spongepowered.mixin' version '[0.7,0.8)'
}

repositories {
    maven { url = 'https://maven.minecraftforge.net/' }

    maven {
        name "Modding Legacy Maven"
        url "https://maven.moddinglegacy.com/maven"
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    flatDir {
        dir 'libs'
    }
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
    mavenCentral()
}



version = '3.16'
group = 'com.github.L_Ender' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'L_Enders_Cataclysm'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')


    // Default run configurations.
    // These can be tweaked, removed, or duplicated as h  needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config="+"lionfishapi.mixins.json"
            arg "-mixin.config="+"cataclysm.mixins.json"

            // Recommended logging data f  or a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                cataclysm {
                    source sourceSets.main
                }
            }
        }

        server {
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            arg "-mixin.config="+"lionfishapi.mixins.json"
            arg "-mixin.config="+"cataclysm.mixins.json"


            property 'forge.logging.console.level', 'debug'

            mods {
                lionfishapi {
                    source sourceSets.main
                }
            }
        }

        data {
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            arg "-mixin.config="+"lionfishapi.mixins.json"
            arg "-mixin.config="+"cataclysm.mixins.json"


            property 'forge.logging.console.level', 'debug'

            mods {
                lionfishapi {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation fg.deobf("curse.maven:lionfish-api-1001614:5922047")
    compileOnly(fg.deobf("mezz.jei:jei-${jei_mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${jei_mc_version}-forge-api:${jei_version}"))
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("curse.maven:worldedit-225608:4586218")
    runtimeOnly(fg.deobf("mezz.jei:jei-${jei_mc_version}-forge:${jei_version}"))
    runtimeOnly fg.deobf("curse.maven:neat-238372:4580940")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
}


mixin {
    add sourceSets.main, "lionfishapi.refmap.json"
    add sourceSets.main, "cataclysm.refmap.json"
    config 'lionfishapi.mixins.json'
    config 'cataclysm.mixins.json'
}


jar {
    manifest {
        attributes([
                "Specification-Title": "com.github.L_Ender.cataclysm",
                "Specification-Vendor": "L_Ender",
                "Specification-Version": "1.87", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"L_Ender",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile) {
    options.debug = true
}



